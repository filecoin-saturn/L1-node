# 2g of memory for keys is about 16 million cached items
proxy_cache_path /usr/src/app/shared/nginx_cache levels=2:2:2 keys_zone=my_cache:2000m inactive=90d min_free=50G use_temp_path=off;

upstream node_backend {
    server              127.0.0.1:10361 max_fails=0;
    server              127.0.0.2:10361 max_fails=0;
    server              127.0.0.3:10361 max_fails=0;
    server              127.0.0.4:10361 max_fails=0;
    server              127.0.0.5:10361 max_fails=0;
}

# Either tls_proxy.conf or non_tls_proxy.conf
include /etc/nginx/conf.d/L1.conf;

map $http_accept $format_header {
    default                               "";
    "application/vnd.ipld.car"            "car";
    "application/vnd.ipld.car;version=1"  "car";
    "application/vnd.ipld.car; version=1" "car";
    "application/vnd.ipld.car;version=2"  "carv2";
    "application/vnd.ipld.car; version=2" "carv2";
    "application/vnd.ipld.raw"            "raw";
}

# Restrict valid values to prevent cache key explosion.
map $arg_format $format_query {
    default "";
    "car"   "car";
    "raw"   "raw";
}

# Coalesce header & query values to make a single cache key component.
map $format_query $format_final {
    default $format_header;
    "car"   "car";
    "raw"   "raw";
}

# Parse query param with hyphen
# https://stackoverflow.com/a/64015277/2498782
map $args $arg_dag_scope {
    "~(^|&)dag-scope=(?<temp>[^&]+)"  $temp;
}

map $arg_dag_scope $dag_scope {
    default  "all";
    "all"    "all";
    "entity" "entity";
    "block"  "block";
}

# Removes trailing slash when rewriting subdomain CIDs to path CIDs
# This way we don't cache the same CID twice due to an extra slash.
# bad:  <cid>.ipfs.dweb.link -> strn.pl/ipfs/<cid>/
# good: <cid>.ipfs.dweb.link -> strn.pl/ipfs/<cid>
map $request_uri $request_uri_no_trailing_slash {
    default $request_uri;
    "/"     "";
}

map $status $retry_after_seconds {
    default '';
    429 '10';
}

map $request_time $request_time_ms {
    ~^0\.0*(\d+?)$  $1;
    ~(\d+)\.(\d+)   $1$2;
}

map $upstream_connect_time $upstream_connect_time_ms {
    ~^0\.0*(\d+?)$  $1;
    ~(\d+)\.(\d+)   $1$2;
}

map $upstream_header_time $upstream_header_time_ms {
    ~^0\.0*(\d+?)$  $1;
    ~(\d+)\.(\d+)   $1$2;
}

map $upstream_response_time $upstream_response_time_ms {
    ~^0\.0*(\d+?)$  $1;
    ~(\d+)\.(\d+)   $1$2;
}
