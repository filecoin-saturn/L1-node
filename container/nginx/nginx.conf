load_module /usr/lib/nginx/modules/ngx_http_brotli_filter_module.so;
load_module /usr/lib/nginx/modules/ngx_http_brotli_static_module.so;
load_module /usr/lib/nginx/modules/ngx_http_js_module.so;
load_module /usr/lib/nginx/modules/ngx_http_auth_jwt_module.so;

user  nginx;
worker_processes  auto;

error_log  /usr/src/app/shared/nginx_log/error.log notice;
pid        /var/run/nginx.pid;

events {
    worker_connections 20000;
}

http {
    js_path "/etc/nginx/njs/";
    js_preload_object denylist.json;
    js_import auth from auth.js;
    js_import ipfsResponse from ipfs-response.js;

    include       /etc/nginx/mime.types;
    default_type  application/octet-stream;

    log_format  main  '$remote_addr - $remote_user [$time_local] "$request" '
                      '$status $body_bytes_sent "$http_referer" '
                      '"$http_user_agent" "$http_x_forwarded_for"';

    access_log  /usr/src/app/shared/nginx_log/access.log  main;

    # == custom node directives ==
    sendfile            on;
    sendfile_max_chunk  512k;
    tcp_nopush          on;

    keepalive_time      5m;
    keepalive_timeout   2m;

    reset_timedout_connection   on;

    # Nginx Core Module     https://nginx.org/en/docs/http/ngx_http_core_module.html#variables
    # Nginx Upstream Module https://nginx.org/en/docs/http/ngx_http_upstream_module.html
    # IPFS Gateway Spec     https://github.com/ipfs/specs/blob/main/http-gateways/PATH_GATEWAY.md
    # time: $time_iso8601               (string - 2019-10-10T10:10:10+00:00) request start time in ISO 8601 format
    # server: $server_addr              (string - current server ip address)
    # uri: $request_uri                 (string - /foo/bar?baz=qux&quux=quuz) original request uri with encoded query args
    # method: $request_method           (string - GET) request method
    # status: $status                   (integer - 200) response status code
    # rt: $request_time                 (integer - 3.14) full request time in seconds with milliseconds
    # uct: $upstream_connect_time       (integer - 0.001) time in seconds it took to establish connection with upstream server
    # uht: $upstream_header_time        (integer - 0.001) time in seconds it took to receive response headers from upstream server
    # urt: $upstream_response_time      (integer - 3.14) time in seconds it took to receive full response from upstream server
    # ubs: $upstream_bytes_sent         (integer - 1234) bytes sent to upstream server from nginx including headers
    # ubr: $upstream_bytes_received     (integer - 1234) bytes received from upstream server by nginx including headers
    # bytes: $body_bytes_sent           (integer - 1234) bytes sent from server to client excluding headers
    # range: $http_range                (string - bytes=0-4000) requested bytes range
    # cache: $upstream_cache_status     (string - HIT) cache status of the response
    # host: $host                       (string - strn.pl)
    # scheme: $scheme                   (string - https) request scheme
    # addr: $remote_addr                (string - 85.21.12.44) client ip address
    # id: $request_id                   (string - f9ed4675f1c53513c61a3b3b4e25b4c0) unique request id
    # ref: $http_referer                (string - https://example.com/foo/bar) request referrer header
    # ua: $http_user_agent              (string - AppleTV5,3/9.1.1) client user agent
    # ff: $http_x_forwarded_for         (string - 10.4.1.23) X-Forwarded-For header sent by client
    # sp: $server_protocol              (string - HTTP/1.1) server protocol
    # tp: $http_traceparent             (string - 00-779efbcbc70ce91a26cfed853688dd1c-3a72e29d089f9d15-01) traceparent header sent by client
    # bfid: $http_x_request_id          (string - f9ed4675f1c53513c61a3b3b4e25b4c0) unique bifrost request id
    # auth: $http_authorization         (string - Bearer <jwt>) JWT token

    log_format node escape=json 'time=$time_iso8601 server=$server_addr uri="$request_uri" method=$request_method '
                                'status=$status rt=$request_time uct=$upstream_connect_time uht=$upstream_header_time '
                                'urt=$upstream_response_time ubs=$upstream_bytes_sent ubr=$upstream_bytes_received '
                                'bytes=$body_bytes_sent range="$http_range" cache=$upstream_cache_status host=$host '
                                'scheme=$scheme addr=$remote_addr id=$request_id ref="$http_referer" ua="$http_user_agent" '
                                'ff="$http_x_forwarded_for" sp=$server_protocol tp=$http_traceparent bfid=$http_x_request_id '
                                'auth="$http_authorization"';

    limit_req_zone      $binary_remote_addr zone=one:100m rate=300r/s;
    limit_req_status    429;

    server_tokens       off;

    open_file_cache          max=1000 inactive=1h;
    open_file_cache_valid    1d;
    open_file_cache_min_uses 1;

    gzip on;
    gzip_vary       on;
    gzip_proxied    any;
    gzip_comp_level 5;
    gzip_min_length 800;
    gzip_disable    "msie6";
    gzip_types text/html text/richtext text/plain text/css text/x-script text/x-component
               text/x-java-source text/x-markdown application/javascript application/x-javascript
               text/javascript text/js image/x-icon image/vnd.microsoft.icon application/x-perl
               application/x-httpd-cgi text/xml application/xml application/xml+rss application/vnd.api+json
               application/x-protobuf application/json multipart/bag multipart/mixed application/xhtml+xml
               font/ttf font/otf font/x-woff image/svg+xml application/vnd.ms-fontobject application/ttf
               application/x-ttf application/otf application/x-otf application/truetype application/opentype
               application/x-opentype application/font-woff application/eot application/font application/font-sfnt
               application/wasm application/javascript-binast application/manifest+json application/ld+json
               application/graphql+json application/geo+json;

    brotli              on;
    brotli_comp_level   5;
    brotli_min_length   800;
    brotli_types text/richtext text/plain text/css text/x-script text/x-component
                 text/x-java-source text/x-markdown application/javascript application/x-javascript
                 text/javascript text/js image/x-icon image/vnd.microsoft.icon application/x-perl
                 application/x-httpd-cgi text/xml application/xml application/xml+rss application/vnd.api+json
                 application/x-protobuf application/json multipart/bag multipart/mixed application/xhtml+xml
                 font/ttf font/otf font/x-woff image/svg+xml application/vnd.ms-fontobject application/ttf
                 application/x-ttf application/otf application/x-otf application/truetype application/opentype
                 application/x-opentype application/font-woff application/eot application/font application/font-sfnt
                 application/wasm application/javascript-binast application/manifest+json application/ld+json
                 application/graphql+json application/geo+json;

    # == end custom node directives ==

    include /etc/nginx/conf.d/proxy.conf;
}
